generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model article_imgs {
  id         Int       @id @default(autoincrement())
  article_id Int?
  img_url    String
  img_order  Int
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  articles   articles? @relation(fields: [article_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model articles {
  id           Int            @id @default(autoincrement())
  title        String         @db.VarChar(50)
  content      String
  topic        Int?
  created_at   DateTime?      @default(now()) @db.Timestamptz(6)
  updated_at   DateTime?      @default(now()) @db.Timestamptz(6)
  views        Int?           @default(0)
  article_imgs article_imgs[]
  topics       topics?        @relation(fields: [topic], references: [id], onDelete: NoAction, onUpdate: NoAction)
  comments     comments[]
}

model comments {
  id         Int       @id @default(autoincrement())
  content    String    @db.VarChar(500)
  member_id  Int
  article_id Int
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  articles   articles  @relation(fields: [article_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  members    members   @relation(fields: [member_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model members {
  id            Int        @id @default(autoincrement())
  account       String     @unique(map: "members_email_key") @db.VarChar(50)
  password_hash String
  nickname      String?    @db.VarChar(30)
  created_at    DateTime?  @default(now()) @db.Timestamptz(6)
  is_activated  Boolean?   @default(true)
  avatar_url    String?    @default("/imgs/avatar-default.png")
  comments      comments[]
}

model topics {
  id         Int        @id @default(autoincrement())
  topic_name String     @db.VarChar(50)
  articles   articles[]
}
